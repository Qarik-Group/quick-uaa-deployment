#!/bin/bash
repo_root=$(dirname $(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd))

if [ -e "bbl-state.json" ]; then
    BBL_STATE_DIR="$(pwd)"
fi

if [[ "${BBL_STATE_DIR:-X}" != "X" ]]; then
    UAADEPLOY_PROJECT_ROOT="${BBL_STATE_DIR}"
    UAADEPLOY_STATE_ROOT="${BBL_STATE_DIR}/vars"
    UAADEPLOY_VARS_FILE="${UAADEPLOY_STATE_ROOT}/director-vars-file.yml"
    UAADEPLOY_STATE_STORE="${UAADEPLOY_STATE_ROOT}/bosh-state.json"
    UAADEPLOY_VARS_STORE="${UAADEPLOY_STATE_ROOT}/director-vars-store.yml"
fi

project_root=${UAADEPLOY_PROJECT_ROOT:-${repo_root}}
offline_resources=${project_root}/offline_resources

state=${UAADEPLOY_STATE_ROOT:-${project_root}/state}
vars_file=${UAADEPLOY_VARS_FILE:-${project_root}/vars.yml}
state_json_path=${UAADEPLOY_STATE_STORE:-${state}/state.json}
vars_store=${UAADEPLOY_VARS_STORE:-${state}/creds.yml}

manifest="${repo_root}/src/bosh-deployment/bosh.yml"
state_arg="--state ${state_json_path}"
vars_store_arg="--vars-store ${vars_store}"

mkdir -p ${state}
tmp=$(mktemp -d)
trap "rm -fr ${tmp}" EXIT
var_cache="${tmp}/vars_cache.yml"
int_cache="${tmp}/int_cache.yml"

PATH=${repo_root}/bin:${PATH}

version=$(grep uaa-deployment ${repo_root}/.versions | cut -d= -f2)

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

cpi() {
    local cpi_file=${state}/cpi
    local lite_file=${state}/lite
    if [[ ! -f $cpi_file ]]; then
        echo "virtualbox" > ${cpi_file}
        echo "true" > ${lite_file}
    fi
    cat ${cpi_file}
}

cpis() {
    find ${repo_root}/ops/cpis -mindepth 1 -maxdepth 1 ! -type l -exec basename -a {} +;
}

validate_vars_file() {
    # Todo: prettify
    local cpi_vars=${repo_root}/ops/cpis/$(cpi)/vars.tmpl
    if [ ! -e $vars_file ]; then
        cp $cpi_vars $vars_file
        if [ ! $(cpi) = "virtualbox" ]; then
            echo "We just copied a template in $vars_file please adjust it to your needs"
            # we should break here or check file contents and see if we still have the right var file for the cpi
            exit 1
        fi
    fi
}

vars_file() {
    local state_vars=${state}/vars.yml
    bosh int $vars_file > $state_vars
    echo $state_vars
}

validate_cpi() {
    local cpis_dir=${repo_root}/ops/cpis
    if [ ! -d ${cpis_dir}/$(cpi) ]; then
        echo "'--cpi $(cpi)' not supported, please one of the following:"
        echo $(cpis | xargs)
        exit 1
    fi
    _ensure_cpi_dependencies
}

validate_cpi_flags() {
    if [ -f ${state}/flags ]; then
        for option in $(cat ${state}/flags); do
            local flags_dirs="${repo_root}/ops/flags"
            if [ -d "${repo_root}/ops/cpis/$(cpi)/flags" ]; then
                flags_dirs+=" ${repo_root}/ops/cpis/$(cpi)/flags"
            fi
            local supported_flags=$(ls ${flags_dirs} | grep yml | cut -d "." -f 1 | sed 's/^/--/' | xargs)
            if [[ ! ${supported_flags} == *"${option}"* ]]; then
                echo "unsupported flag: --${option}"
                echo "flags for '--cpi $(cpi)' are: ${supported_flags}"
                exit 1
            fi
        done
    fi
}

normalize_flags() (
    if [ -f ${state}/flags ]; then
        cat ${state}/flags | sort | uniq > ${state}/flags.tmp && mv ${state}/flags{.tmp,}
    fi
)

int_args() (
    local ops_files=()

    vars_file_arg="--vars-file $(vars_file)"

    ops_files+=(${repo_root}/ops/*.yml)
    ops_files+=(${repo_root}/ops/cpis/$(cpi)/*.yml)

    if [ -f ${state}/flags ]; then
        for flag in $(cat ${state}/flags); do
            if [ -e "${repo_root}/ops/flags/${flag}.yml" ]; then
                ops_files+=(${repo_root}/ops/flags/${flag}.yml)
            else
                ops_files+=(${repo_root}/ops/cpis/$(cpi)/flags/${flag}.yml)
            fi
        done
    fi

    if [[ -d ${project_root}/operators ]]; then
        ops_files+=(${project_root}/operators/*.yml)
    fi

    ops_file_args=$(printf '%s\n' "${ops_files[@]}" | sed 's|\(.*\)/|\1@|' | sort -t@ -k2 | sed 's|@|/|' | sed 's/^/-o /' | xargs)
    echo "${manifest} ${ops_file_args} ${vars_store_arg} ${vars_file_arg}"
)

ca_cert() {
    local tmp=$(mktemp -d) # temp fix for https://github.com/cloudfoundry/cf-uaac/issues/60
    local ca_cert_file="${tmp}/ca.pem"
    store_int --path /default_ca/ca > $ca_cert_file
    echo $ca_cert_file
}

url() {
    int --path /instance_groups/0/jobs/name=uaa/properties/uaa/url
}

usage() {
    echo "Quick UAA Deployment v${version:-(development)}"
    echo "  up -- creates the UAA VM with bosh create-env"
    echo "  down -- deletes VM with bosh delete-env - can be used with --clean"
    echo "  clean -- start with a clean environment - use this only after you've torn down your env"
    echo "  ssh -- ssh into the UAA VM"
    echo "  logs -- streaming logs from UAA/Postgres"
    echo "  env -- sourceable environment variables for cli clients"
    echo "  int -- wrapper for 'bosh int' for the bosh manifest"
    echo "  info -- UAA information"
    # echo "  bbr -- backup & restore UAA" - WIP
    echo "  auth-client -- configures uaa cli as a client only"
    echo "  url -- URL for UAA"
    echo "  cacert -- path to CA certificate"
    echo "  offline -- create tarball with all CLIs and BOSH releases"
    exit 1
}

up_usage() {
    echo "  --cpi    Cloud provider: [$(cpis | xargs | sed 's/ /, /g')]"
    echo "  --debug  Show arguments passed to 'bosh create-env'"
    echo "$(ls ${repo_root}/ops/flags | cut -d "." -f 1 | sed 's/^/  --/')"
    echo ""
    echo "  Optional cpi specific flags:"

    local cpis_dir=${repo_root}/ops/cpis
    for cpi in $(cpis); do
        local flags_dir=${repo_root}/ops/cpis/${cpi}/flags
        if [ -d ${flags_dir} ]; then
            echo "    ${cpi}: $(ls ${flags_dir} | cut -d "." -f 1 | sed 's/^/--/' | xargs)"
        fi
    done

}

down_usage() {
    echo "  -c | --clean  cleans up your enviroment by removing state files"
}

platform() {
    if [ "$(uname)" == "Darwin" ]; then
        echo "darwin"
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        echo "linux"
    fi
}

faketty() {
    case $(platform) in
        darwin)
            script -q /dev/null "$@"
            ;;
        linux)
            script -qfc "$(printf "%q " "$@")" /dev/null
            ;;
    esac
}

up() {
    local flags="--cpi $(cpi)"
    if [ -f ${state}/flags ]; then
        flags+=" $(cat ${state}/flags | sed 's/^/--/' | xargs)"
    fi
    echo "Using flags: ${flags}"
    echo -e "Flag files: '${state}/{cpi,lite,flags}'\n"

    if [[ ${DEBUG} == true ]]; then
        echo -e "bosh create-env $(int_args | sed 's/yml/yml \\ \\n/g') ${state_arg}\n"
    fi

    bosh create-env $(int_args) ${state_arg} "$@"
}

down() {
    if [ ! -e $vars_file ]; then
      echo "please create a environment first with 'u up'"
      exit 1
    fi

    bosh delete-env $(int_args) ${state_arg} "$@"
    echo "you can use the clean command if your are planning to use a new cpi or ip"
}

clean() {
    if [[ -f vars.yml ]]; then
        if curl -m 1 -k -s "https://$(bosh int <(u vars) --path /internal_ip):8443/login" | grep Version &>/dev/null ; then
            echo "Your UAA environment is still running, please tear it down with 'u down --clean'"
            exit 1
        fi
        rm -rf ${state}
        mv ${vars_file} ${vars_file}.bck
        echo "'state' dir has been cleaned and 'vars.yml' has been moved to 'vars.yml.bck'"
    else
        rm -rf ${state}
        echo "'state' dir has been cleaned; there was no existing vars.yml"
    fi
}

vars() {
    cat $(vars_file)
}

get_var() {
    path=$1
    if [[ ! -s ${var_cache} ]]; then
        vars > ${var_cache}
    fi
    bosh int ${var_cache} --path "/$path"
}

get_var_with_default() {
    path=$1
    default_value=$2
    if [[ ! -f ${var_cache} ]]; then
        vars > ${var_cache}
    fi
    if [[ -n $(cat ${var_cache} | grep "$path:") ]]; then
        bosh int ${var_cache} --path "/$path"
    else
        echo "${default_value}"
    fi
}

_alias() {
    get_var_with_default "alias" "uaa-deployment"
}

env() {
    echo "export PATH=\"${PATH}\""
    if [[ ! -f ${vars_store} ]]; then
        exit 0
    fi
    echo "export UAA_URL=$(url)"
    echo "export UAA_CA_CERT='$(cat $(ca_cert))'"
    echo "export UAA_CA_CERT_FILE='$(ca_cert)'"
}

info() {
    echo "UAA:"
    echo "  url: $(url)"
    echo "  client: uaa_admin"
    echo "  client_secret: $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/clients/uaa_admin/secret)"
    echo "  username: $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/scim/users/0/name)"
    echo "  password: $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/scim/users/0/password)"
}

_bbr() {
    local url="https://github.com/cloudfoundry-incubator/bosh-backup-and-restore/releases/download"
    local version=$(grep bbr ${repo_root}/.versions | cut -d= -f2)
    local cli_path=${repo_root}/bin/bbr

    set -x
    if ! ( [ -f ${cli_path} ] && ${cli_path} --version | head -n 1 | grep ${version} > /dev/null); then
      echo "installing bbr cli '${version}' into: ${repo_root}/bin/"
      pushd $(mktemp -d)
      curl -s -L >bbr.tar "${url}/v${version}/bbr-${version}.tar"
      tar -xf bbr.tar
      if [ "$(platform)" == "darwin" ]; then
          mv releases/bbr-mac ${repo_root}/bin/bbr
      else
          mv releases/bbr ${repo_root}/bin/
      fi
      popd
    fi

    local user=$(int --path /instance_groups/name=bosh/jobs/name=user_add/properties/users/0/name)
    ${cli_path} director --host $(ip) --username ${user} --private-key-path $(ssh_private_key) "$@"
}

_ensure_dependencies() {
  local errors=
  if [[ "$(which curl)X" == "X" ]]; then
    (>&2 echo "ERROR: please install 'curl'")
    errors=1
  fi
  if [[ "$(which ruby)X" == "X" ]]; then
    (>&2 echo "ERROR: please install 'ruby'")
    (>&2 echo "  See https://bosh.io/docs/cli-v2-install/#additional-dependencies")
    errors=1
  fi
  [[ "${errors:-X}" == "X" ]] || { exit 1; }
}

_ensure_cpi_dependencies() {
  case $(cpi) in
    virtualbox)
      [[ "$(which VirtualBox)X" == "X" ]] && {
        echo "ERROR: please install VirtualBox"
        echo "  See https://www.virtualbox.org/wiki/Downloads"
        exit 1
      }
      ;;
    *)
      ;;
  esac
}

_ensure_bosh_cli_installed() {
    local url="https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli"
    local version=$(grep bosh ${repo_root}/.versions | cut -d= -f2)
    local cli_path=${repo_root}/bin/bosh

    if ! ( [ -f ${cli_path} ] && ${cli_path} --version | head -n 1 | grep ${version} > /dev/null); then
      if [[ -f ${offline_resources}/bosh-$version-$(platform)-amd64 ]]; then
        (>&2 echo "copying bosh cli '${version}' into ${repo_root}/bin/")
        cp ${offline_resources}/bosh-$version-$(platform)-amd64 ${repo_root}/bin/bosh
      else
        (>&2 echo "installing bosh cli '${version}' into: ${repo_root}/bin/")
        pushd $(mktemp -d)
        if [ "$(platform)" == "darwin" ]; then
            curl -s -L >bosh "${url}-${version}-darwin-amd64"
            chmod +x bosh
            mv bosh ${repo_root}/bin/
        else
            curl -s -L >bosh "${url}-${version}-linux-amd64"
            chmod +x bosh
            mv bosh ${repo_root}/bin/
        fi
        popd
      fi
    fi
}

_ensure_uaa_cli_installed() {
    local url="https://github.com/starkandwayne/uaa-cli-releases/releases/download"
    local version=$(grep uaa= ${repo_root}/.versions | cut -d= -f2)
    local cli_path=${repo_root}/bin/uaa

    if ! ( [ -f ${cli_path} ] && ${cli_path} version | head -n 1 | grep ${version} > /dev/null); then
      if [[ -f ${offline_resources}/uaa-$version-$(platform)-amd64 ]]; then
        (>&2 echo "copying uaa cli '${version}' into ${repo_root}/bin/")
        cp ${offline_resources}/uaa-$version-$(platform)-amd64 ${repo_root}/bin/uaa
      else
        (>&2 echo "installing uaa cli '${version}' into: ${repo_root}/bin/")
        pushd $(mktemp -d)
        curl -s -L >uaa "${url}/v${version}/uaa-$(platform)-amd64"
        chmod +x uaa
        mv uaa ${repo_root}/bin/
        popd
      fi
    fi
}

_uaac() {
    faketty uaac target $(url) --ca-cert $(ca_cert)
    faketty uaac token client get uaa_admin --secret $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/clients/uaa_admin/secret)
}

_uaa_auth_client() {
    faketty uaa target $(url) --skip-ssl-validation "$@"
    faketty uaa get-client-credentials-token uaa_admin --client_secret $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/clients/uaa_admin/secret) "$@"
}

_uaa_auth_user() {
    faketty uaa target $(url) --skip-ssl-validation "$@"
    faketty uaa get-password-token uaa_cli -s "$(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/clients/uaa_cli/secret)" -u $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/scim/users/0/name) -p $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/scim/users/0/password) "$@"
}

store_int() {
    bosh int $vars_store "$@"
}

int() {
    if [[ ! -s ${int_cache} ]]; then
        bosh int $(int_args) > ${int_cache}
    fi
    bosh int ${int_cache} "$@"
}

ip() {
    int --path /networks/name=default/subnets/0/static/0
}

ssh_private_key() {
    local tmp=$(mktemp -d) # can be removed after fix https://github.com/cloudfoundry/bosh-cli/issues/418
    local ssh_private_key="${tmp}/ssh.key"
    store_int --path /jumpbox_ssh/private_key > $ssh_private_key
    chmod 600 $ssh_private_key
    echo $ssh_private_key
}

jump() {
    echo $BOSH_ALL_PROXY | sed -e 's$ssh+socks5://\(.*\):.*=\(.*\)$-o "ProxyCommand=ssh \1 -i \2 nc %h %p"$g'
}

_ssh() {
    tmp_config=$(mktemp)
    if [[ "$BOSH_ALL_PROXY" == "ssh+socks5"* ]]; then
        echo "$BOSH_ALL_PROXY" | sed -e 's$ssh+socks5://\(.*\):\(.*\)?.*=\(.*\)$ProxyCommand ssh -W %h:%p \1 -p \2 -i \3$g' > ${tmp_config}
    fi
    local user=$(int --path /instance_groups/name=bosh/jobs/name=user_add/properties/users/0/name)
    cmd="ssh -i $(ssh_private_key) -F ${tmp_config} $user@$(ip)"
    set -x
    if [ $# -eq 0 ]; then
        ${cmd} -t 'command; sudo su -'
    else
        ${cmd} "$@"
    fi
    rm ${tmp_config}
}

logs() {
    _ssh sudo tail -f /var/vcap/sys/log/*/*.log
}

offline() {
  set -eu
  if [[ ! -f $vars_file ]]; then
    (>&2 echo "WARN: missing vars.yml; defaulting to virtualbox")
    validate_vars_file
  fi

  export operators_filelocation=${project_root}/operators

  echo "Downloading all the things. This can take a while!"
  echo

  rm -f ${operators_filelocation}/9x*
  tmp_releases_dir=$(mktemp -d)
  trap "rm -rf ${tmp_releases_dir}" EXIT
  mkdir -p ${operators_filelocation} ${offline_resources}
  touch ${operators_filelocation}/dummy.yml
  trap "rm -rf ${operators_filelocation}/dummy.yml" EXIT

  _offline_bosh_cli
  _offline_uaa_cli

  release_names=$(int --path /releases | grep name: | awk '{print $3}')
  for release_name in $release_names; do
    release_version=$(int --path /releases/name=$release_name/version)
    release_url=$(int --path /releases/name=$release_name/url)
    release_sha1=$(int --path /releases/name=$release_name/sha1)
    filename="${release_name}-${release_version}.tgz"

    cat > "${operators_filelocation}/9x-${release_name}-offline-compiled-release.yml" <<-YML
- type: replace
  path: /releases/name=${release_name}?
  value:
    name:    ${release_name}
    version: ${release_version}
    sha1:    ${release_sha1}
    url:     file://../../offline_resources/${filename}
YML

    # confirm sha1 matches; else re-download
    if [ ! -f "${offline_resources}/${filename}" ]; then
        echo "Starting to download ${filename}"
        curl --retry 5 -f -o ${tmp_releases_dir}/${filename} -L ${release_url}

        mv ${tmp_releases_dir}/${filename} ${offline_resources} &>/dev/null
        echo "Downloaded ${filename}"
    else
        echo "Release ${filename} was already downloaded"
    fi
  done

  stemcell_url=$(int --path /resource_pools/name=vms/stemcell/url)
  stemcell_sha1=$(int --path /resource_pools/name=vms/stemcell/sha1)
  # TODO: getting the name could be handled better
  stemcell_name=$(echo ${stemcell_url} | cut -d "-" -f 2,3,4,5)
  # TODO: make get version more robust
  stemcell_version=$(echo ${stemcell_url} | cut -d= -f2)
  stemcell_filename="${stemcell_name}-${stemcell_version}.tgz"

  # TODO: test that sha1 is ok
  if [ ! -f "${offline_resources}/${stemcell_filename}" ]; then
    echo "Starting to download stemcell"
    curl --retry 5 -s -f -o ${tmp_releases_dir}/${stemcell_filename} -L ${stemcell_url}
    cat > "${operators_filelocation}/9x-stemcell-offline-stemcell.yml" <<YML
    - type: replace
      path: /resource_pools/name=vms/stemcell?
      value:
        url: "file://../../${stemcell_filename}"
        sha1: ${stemcell_sha1}
YML
    mv ${tmp_releases_dir}/${stemcell_filename} ${offline_resources} &>/dev/null
    echo "Downloaded stemcell ${stemcell_filename}"
  else
    echo "Stemcell ${stemcell_filename} was already downloaded"
  fi

  echo "Compressing files"
  # FIXME: for some reason gloabl version variable is not used, but the version of the last release in the manifest
  filelocation=${1:-'/tmp'}
  tarfilename=uaa-deployment-offline-$(cpi)-${version}.tar.gz
  tarfile=${filelocation}/${tarfilename}
  tar -zcf ${tarfile} -C ${project_root} README.md bin/quaa bin/u offline_resources operators ops ops-examples src .versions .envrc .gitignore
  echo "Your file is located in ${tarfile}"
  echo "Unpack with:"
  echo "  mkdir -p ~/workspace/uaa-deployment"
  echo "  tar xfz ${tarfilename} -C ~/workspace/uaa-deployment"
}

_offline_bosh_cli() {
  tmp_releases_dir=$(mktemp -d)
  trap "rm -rf ${tmp_releases_dir}" EXIT

  local url="https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli"
  local version=$(grep bosh ${repo_root}/.versions | cut -d= -f2)
  if [[ ! -f ${offline_resources:?required}/bosh-${version}-darwin-amd64 ]]; then
    echo "Downloading bosh CLI v${version} (darwin)..."
    curl -L >${tmp_releases_dir}/bosh-${version}-darwin-amd64 ${url}-${version}-darwin-amd64
    echo "Downloading bosh CLI v${version} (linux)..."
    curl -L >${tmp_releases_dir}/bosh-${version}-linux-amd64  ${url}-${version}-linux-amd64
    chmod +x ${tmp_releases_dir}/bosh*
    mv ${tmp_releases_dir}/bosh* ${offline_resources}/ &>/dev/null
  else
    echo "bosh CLIs already downloaded"
  fi
}

_offline_uaa_cli() {
  tmp_releases_dir=$(mktemp -d)
  trap "rm -rf ${tmp_releases_dir}" EXIT

  local url="https://github.com/starkandwayne/uaa-cli-releases/releases/download"
  local version=$(grep uaa= ${repo_root}/.versions | cut -d= -f2)
  if [[ ! -f ${offline_resources:?required}/uaa-${version}-darwin-amd64 ]]; then
    echo "Downloading uaa CLI v${version} (darwin)..."
    curl -L >${tmp_releases_dir}/uaa-${version}-darwin-amd64 ${url}/v${version}/uaa-darwin-amd64
    echo "Downloading uaa CLI v${version} (linux)..."
    curl -L >${tmp_releases_dir}/uaa-${version}-linux-amd64  ${url}/v${version}/uaa-linux-amd64
    chmod +x ${tmp_releases_dir}/uaa*
    mv ${tmp_releases_dir}/uaa* ${offline_resources}/ &>/dev/null
  else
    echo "uaa CLIs already downloaded"
  fi
}

_ensure_dependencies
_ensure_bosh_cli_installed
_ensure_uaa_cli_installed
case "$1" in
    up)
        shift
        bosh_args=""
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    up_usage
                    exit 0
                    ;;
                --cpi)
                    echo "$2" > ${state}/cpi
                    shift
                    ;;
                --cpi=*)
                    echo "${1#*=}" > ${state}/cpi
                    ;;
                --debug)
                    DEBUG=true
                    ;;
                --var=*|--var-file=*)
                    bosh_args="${bosh_args} ${1}"
                    ;;
                *)
                    echo ${1#*--} >> ${state}/flags
            esac
            shift
        done
        normalize_flags
        validate_cpi
        validate_vars_file
        validate_cpi_flags

        up ${bosh_args}
        ;;

    down)
        shift
        bosh_args=""
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    down_usage
                    exit 0
                    ;;
                -c|--clean|clean)
                    down
                    clean
                    exit 0
                    ;;
                --var=*|--var-file=*)
                    bosh_args="${bosh_args} ${1}"
                    ;;
            esac
            shift
        done
        down ${bosh_args}
        ;;

    clean)
        clean "$@"
        ;;

    env)
        env "$@"
        ;;

    info)
        info "$@"
        ;;

    uaac)
        _uaac "$@"
        ;;

    auth-client)
        _uaa_auth_client "$@"
        ;;

    auth-user)
        _uaa_auth_user "$@"
        ;;

    bbr)
        shift
        _bbr "$@"
        ;;

    ssh)
        shift
        _ssh "$@"
        ;;

    logs)
        shift
        logs "$@"
        ;;

    offline)
        shift
        offline "$@"
        ;;

    int)
        shift
        int "$@"
        ;;

    vars)
        vars "$@"
        ;;

    url)
        shift
        url
        ;;

    ca_cert)
        shift
        ca_cert
        ;;

    cacert)
        shift
        ca_cert
        ;;

    *)
        usage
        exit 1
        ;;
esac
